<?php

namespace PhpKnight\WeMeal\Api\Controllers;

use PhpKnight\WeMeal\Api\Api;
use WP_Error;
use WP_REST_Request;
use WP_REST_Response;
use WP_REST_Server;

class MealController extends \WP_REST_Posts_Controller {

	/**
	 * Meal menu controller constructor.
	 *
	 * @return void
	 */
	public function __construct() {
		parent::__construct( 'meal' );

		$this->namespace = Api::$namespace;
		$this->rest_base = 'meal';
	}

	/**
	 * Registers the routes for the objects of the controller.
	 *
	 * @return void
	 */
	public function register_routes() {
		register_rest_route(
			$this->namespace,
			'/' . $this->rest_base . '/(?P<id>[\d]+)',
			[
				'args'        => [
					'id' => [
						'description' => __( 'Unique identifier for the meal.', 'we-meal' ),
						'type'        => 'integer',
						'args'        => [
							'id' => [
								'default' => 0,
							],
						],
					],
				],
				[
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => [ $this, 'get_item' ],
					'permission_callback' => [ $this, 'get_item_permissions_check' ],
					'args'                => [],
				],
				'schema'      => [ $this, 'get_public_item_schema' ],
			]
		);

		register_rest_route(
			$this->namespace,
			'/' . $this->rest_base,
			[
				'args'        => [],
				[
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => [ $this, 'get_items' ],
					'permission_callback' => [ $this, 'get_items_permissions_check' ],
					'args'                => [],
				],
				'schema'      => [ $this, 'get_public_item_schema' ],
			]
		);
	}

	/**
	 * Retrieves a collection of meals.
	 *
	 * @param WP_REST_Request $request Full details about the request.
	 * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
	 */
	public function get_item( $request ) {
		return parent::get_item( $request ); // TODO: Change the autogenerated stub
	}

	/**
	 * Retrieves a collection of meals.
	 *
	 * @param WP_REST_Request $request Full details about the request.
	 * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
	 */
	public function get_items( $request ) {
//		var_dump( $request->get_params() );
//		die();
		return parent::get_items( $request ); // TODO: Change the autogenerated stub
	}

	/**
	 * Checks if a given request has access to get item.
	 *
	 * @param WP_REST_Request $request
	 *
	 * @return bool
	 */
	public function get_item_permissions_check( $request ): bool {
		return is_user_logged_in() && current_user_can( 'read' );
	}
}
